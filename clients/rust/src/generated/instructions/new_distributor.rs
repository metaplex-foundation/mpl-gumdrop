//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use solana_program::pubkey::Pubkey;

/// Accounts.
pub struct NewDistributor {
    /// Base key of the distributor.
    pub base: solana_program::pubkey::Pubkey,
    /// [MerkleDistributor].
    pub distributor: solana_program::pubkey::Pubkey,
    /// Payer to create the distributor.
    pub payer: solana_program::pubkey::Pubkey,
    /// The [System] program.
    pub system_program: solana_program::pubkey::Pubkey,
}

impl NewDistributor {
    pub fn instruction(
        &self,
        args: NewDistributorInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: NewDistributorInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.base, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.distributor,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = NewDistributorInstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::GUMDROP_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
struct NewDistributorInstructionData {
    discriminator: [u8; 8],
}

impl NewDistributorInstructionData {
    fn new() -> Self {
        Self {
            discriminator: [32, 139, 112, 171, 0, 2, 225, 155],
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct NewDistributorInstructionArgs {
    pub bump: u8,
    pub root: [u8; 32],
    pub temporal: Pubkey,
}

/// Instruction builder for `NewDistributor`.
///
/// ### Accounts:
///
///   0. `[signer]` base
///   1. `[writable]` distributor
///   2. `[writable, signer]` payer
///   3. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Default)]
pub struct NewDistributorBuilder {
    base: Option<solana_program::pubkey::Pubkey>,
    distributor: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    bump: Option<u8>,
    root: Option<[u8; 32]>,
    temporal: Option<Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl NewDistributorBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// Base key of the distributor.
    #[inline(always)]
    pub fn base(&mut self, base: solana_program::pubkey::Pubkey) -> &mut Self {
        self.base = Some(base);
        self
    }
    /// [MerkleDistributor].
    #[inline(always)]
    pub fn distributor(&mut self, distributor: solana_program::pubkey::Pubkey) -> &mut Self {
        self.distributor = Some(distributor);
        self
    }
    /// Payer to create the distributor.
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    /// The [System] program.
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn bump(&mut self, bump: u8) -> &mut Self {
        self.bump = Some(bump);
        self
    }
    #[inline(always)]
    pub fn root(&mut self, root: [u8; 32]) -> &mut Self {
        self.root = Some(root);
        self
    }
    #[inline(always)]
    pub fn temporal(&mut self, temporal: Pubkey) -> &mut Self {
        self.temporal = Some(temporal);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = NewDistributor {
            base: self.base.expect("base is not set"),
            distributor: self.distributor.expect("distributor is not set"),
            payer: self.payer.expect("payer is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };
        let args = NewDistributorInstructionArgs {
            bump: self.bump.clone().expect("bump is not set"),
            root: self.root.clone().expect("root is not set"),
            temporal: self.temporal.clone().expect("temporal is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `new_distributor` CPI accounts.
pub struct NewDistributorCpiAccounts<'a, 'b> {
    /// Base key of the distributor.
    pub base: &'b solana_program::account_info::AccountInfo<'a>,
    /// [MerkleDistributor].
    pub distributor: &'b solana_program::account_info::AccountInfo<'a>,
    /// Payer to create the distributor.
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [System] program.
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `new_distributor` CPI instruction.
pub struct NewDistributorCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Base key of the distributor.
    pub base: &'b solana_program::account_info::AccountInfo<'a>,
    /// [MerkleDistributor].
    pub distributor: &'b solana_program::account_info::AccountInfo<'a>,
    /// Payer to create the distributor.
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [System] program.
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: NewDistributorInstructionArgs,
}

impl<'a, 'b> NewDistributorCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: NewDistributorCpiAccounts<'a, 'b>,
        args: NewDistributorInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            base: accounts.base,
            distributor: accounts.distributor,
            payer: accounts.payer,
            system_program: accounts.system_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.base.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.distributor.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = NewDistributorInstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::GUMDROP_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(4 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.base.clone());
        account_infos.push(self.distributor.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `NewDistributor` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` base
///   1. `[writable]` distributor
///   2. `[writable, signer]` payer
///   3. `[]` system_program
pub struct NewDistributorCpiBuilder<'a, 'b> {
    instruction: Box<NewDistributorCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> NewDistributorCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(NewDistributorCpiBuilderInstruction {
            __program: program,
            base: None,
            distributor: None,
            payer: None,
            system_program: None,
            bump: None,
            root: None,
            temporal: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// Base key of the distributor.
    #[inline(always)]
    pub fn base(&mut self, base: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.base = Some(base);
        self
    }
    /// [MerkleDistributor].
    #[inline(always)]
    pub fn distributor(
        &mut self,
        distributor: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.distributor = Some(distributor);
        self
    }
    /// Payer to create the distributor.
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    /// The [System] program.
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn bump(&mut self, bump: u8) -> &mut Self {
        self.instruction.bump = Some(bump);
        self
    }
    #[inline(always)]
    pub fn root(&mut self, root: [u8; 32]) -> &mut Self {
        self.instruction.root = Some(root);
        self
    }
    #[inline(always)]
    pub fn temporal(&mut self, temporal: Pubkey) -> &mut Self {
        self.instruction.temporal = Some(temporal);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = NewDistributorInstructionArgs {
            bump: self.instruction.bump.clone().expect("bump is not set"),
            root: self.instruction.root.clone().expect("root is not set"),
            temporal: self
                .instruction
                .temporal
                .clone()
                .expect("temporal is not set"),
        };
        let instruction = NewDistributorCpi {
            __program: self.instruction.__program,

            base: self.instruction.base.expect("base is not set"),

            distributor: self
                .instruction
                .distributor
                .expect("distributor is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct NewDistributorCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    base: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    distributor: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    bump: Option<u8>,
    root: Option<[u8; 32]>,
    temporal: Option<Pubkey>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
