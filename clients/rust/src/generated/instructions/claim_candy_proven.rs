//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct ClaimCandyProven {
    /// The [MerkleDistributor].
    pub distributor: solana_program::pubkey::Pubkey,
    /// The [MerkleDistributor] wallet
    pub distributor_wallet: solana_program::pubkey::Pubkey,
    /// Status of the claim. Created with prove_claim
    pub claim_proof: solana_program::pubkey::Pubkey,
    /// Payer of the claim. Should be `mint_authority` for `candy_machine_mint` and will be
    /// `update_authority` for `candy_machine_metadata`
    pub payer: solana_program::pubkey::Pubkey,
    /// Candy-machine Config
    pub candy_machine_config: solana_program::pubkey::Pubkey,
    /// Candy-Machine. Verified through CPI
    pub candy_machine: solana_program::pubkey::Pubkey,
    /// Candy-Machine-Wallet. Verified through CPI
    pub candy_machine_wallet: solana_program::pubkey::Pubkey,
    /// Generated mint
    pub candy_machine_mint: solana_program::pubkey::Pubkey,
    /// PDA of `candy_machine_mint`
    pub candy_machine_metadata: solana_program::pubkey::Pubkey,
    /// PDA of `candy_machine_mint`
    pub candy_machine_master_edition: solana_program::pubkey::Pubkey,
    /// The [System] program.
    pub system_program: solana_program::pubkey::Pubkey,
    /// SPL [Token] program.
    pub token_program: solana_program::pubkey::Pubkey,
    /// SPL [TokenMetadata] program.
    pub token_metadata_program: solana_program::pubkey::Pubkey,
    /// SPL [CandyMachine] program.
    pub candy_machine_program: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,

    pub clock: solana_program::pubkey::Pubkey,
}

impl ClaimCandyProven {
    pub fn instruction(
        &self,
        args: ClaimCandyProvenInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: ClaimCandyProvenInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(16 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.distributor,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.distributor_wallet,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.claim_proof,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.candy_machine_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.candy_machine,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.candy_machine_wallet,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.candy_machine_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.candy_machine_metadata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.candy_machine_master_edition,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_metadata_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.candy_machine_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.clock, false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = ClaimCandyProvenInstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::GUMDROP_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
struct ClaimCandyProvenInstructionData {
    discriminator: [u8; 8],
}

impl ClaimCandyProvenInstructionData {
    fn new() -> Self {
        Self {
            discriminator: [1, 2, 30, 252, 145, 228, 67, 145],
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ClaimCandyProvenInstructionArgs {
    pub wallet_bump: u8,
    pub claim_bump: u8,
    pub index: u64,
}

/// Instruction builder for `ClaimCandyProven`.
///
/// ### Accounts:
///
///   0. `[writable]` distributor
///   1. `[writable]` distributor_wallet
///   2. `[writable]` claim_proof
///   3. `[signer]` payer
///   4. `[]` candy_machine_config
///   5. `[writable]` candy_machine
///   6. `[writable]` candy_machine_wallet
///   7. `[writable]` candy_machine_mint
///   8. `[writable]` candy_machine_metadata
///   9. `[writable]` candy_machine_master_edition
///   10. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   11. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   12. `[optional]` token_metadata_program (default to `metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s`)
///   13. `[optional]` candy_machine_program (default to `CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR`)
///   14. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
///   15. `[]` clock
#[derive(Default)]
pub struct ClaimCandyProvenBuilder {
    distributor: Option<solana_program::pubkey::Pubkey>,
    distributor_wallet: Option<solana_program::pubkey::Pubkey>,
    claim_proof: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    candy_machine_config: Option<solana_program::pubkey::Pubkey>,
    candy_machine: Option<solana_program::pubkey::Pubkey>,
    candy_machine_wallet: Option<solana_program::pubkey::Pubkey>,
    candy_machine_mint: Option<solana_program::pubkey::Pubkey>,
    candy_machine_metadata: Option<solana_program::pubkey::Pubkey>,
    candy_machine_master_edition: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    token_metadata_program: Option<solana_program::pubkey::Pubkey>,
    candy_machine_program: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    clock: Option<solana_program::pubkey::Pubkey>,
    wallet_bump: Option<u8>,
    claim_bump: Option<u8>,
    index: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl ClaimCandyProvenBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The [MerkleDistributor].
    #[inline(always)]
    pub fn distributor(&mut self, distributor: solana_program::pubkey::Pubkey) -> &mut Self {
        self.distributor = Some(distributor);
        self
    }
    /// The [MerkleDistributor] wallet
    #[inline(always)]
    pub fn distributor_wallet(
        &mut self,
        distributor_wallet: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.distributor_wallet = Some(distributor_wallet);
        self
    }
    /// Status of the claim. Created with prove_claim
    #[inline(always)]
    pub fn claim_proof(&mut self, claim_proof: solana_program::pubkey::Pubkey) -> &mut Self {
        self.claim_proof = Some(claim_proof);
        self
    }
    /// Payer of the claim. Should be `mint_authority` for `candy_machine_mint` and will be
    /// `update_authority` for `candy_machine_metadata`
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// Candy-machine Config
    #[inline(always)]
    pub fn candy_machine_config(
        &mut self,
        candy_machine_config: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.candy_machine_config = Some(candy_machine_config);
        self
    }
    /// Candy-Machine. Verified through CPI
    #[inline(always)]
    pub fn candy_machine(&mut self, candy_machine: solana_program::pubkey::Pubkey) -> &mut Self {
        self.candy_machine = Some(candy_machine);
        self
    }
    /// Candy-Machine-Wallet. Verified through CPI
    #[inline(always)]
    pub fn candy_machine_wallet(
        &mut self,
        candy_machine_wallet: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.candy_machine_wallet = Some(candy_machine_wallet);
        self
    }
    /// Generated mint
    #[inline(always)]
    pub fn candy_machine_mint(
        &mut self,
        candy_machine_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.candy_machine_mint = Some(candy_machine_mint);
        self
    }
    /// PDA of `candy_machine_mint`
    #[inline(always)]
    pub fn candy_machine_metadata(
        &mut self,
        candy_machine_metadata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.candy_machine_metadata = Some(candy_machine_metadata);
        self
    }
    /// PDA of `candy_machine_mint`
    #[inline(always)]
    pub fn candy_machine_master_edition(
        &mut self,
        candy_machine_master_edition: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.candy_machine_master_edition = Some(candy_machine_master_edition);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    /// The [System] program.
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// SPL [Token] program.
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// `[optional account, default to 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s']`
    /// SPL [TokenMetadata] program.
    #[inline(always)]
    pub fn token_metadata_program(
        &mut self,
        token_metadata_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_metadata_program = Some(token_metadata_program);
        self
    }
    /// `[optional account, default to 'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR']`
    /// SPL [CandyMachine] program.
    #[inline(always)]
    pub fn candy_machine_program(
        &mut self,
        candy_machine_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.candy_machine_program = Some(candy_machine_program);
        self
    }
    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }
    #[inline(always)]
    pub fn clock(&mut self, clock: solana_program::pubkey::Pubkey) -> &mut Self {
        self.clock = Some(clock);
        self
    }
    #[inline(always)]
    pub fn wallet_bump(&mut self, wallet_bump: u8) -> &mut Self {
        self.wallet_bump = Some(wallet_bump);
        self
    }
    #[inline(always)]
    pub fn claim_bump(&mut self, claim_bump: u8) -> &mut Self {
        self.claim_bump = Some(claim_bump);
        self
    }
    #[inline(always)]
    pub fn index(&mut self, index: u64) -> &mut Self {
        self.index = Some(index);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts =
            ClaimCandyProven {
                distributor: self.distributor.expect("distributor is not set"),
                distributor_wallet: self
                    .distributor_wallet
                    .expect("distributor_wallet is not set"),
                claim_proof: self.claim_proof.expect("claim_proof is not set"),
                payer: self.payer.expect("payer is not set"),
                candy_machine_config: self
                    .candy_machine_config
                    .expect("candy_machine_config is not set"),
                candy_machine: self.candy_machine.expect("candy_machine is not set"),
                candy_machine_wallet: self
                    .candy_machine_wallet
                    .expect("candy_machine_wallet is not set"),
                candy_machine_mint: self
                    .candy_machine_mint
                    .expect("candy_machine_mint is not set"),
                candy_machine_metadata: self
                    .candy_machine_metadata
                    .expect("candy_machine_metadata is not set"),
                candy_machine_master_edition: self
                    .candy_machine_master_edition
                    .expect("candy_machine_master_edition is not set"),
                system_program: self
                    .system_program
                    .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                    "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
                )),
                token_metadata_program: self.token_metadata_program.unwrap_or(
                    solana_program::pubkey!("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"),
                ),
                candy_machine_program: self.candy_machine_program.unwrap_or(
                    solana_program::pubkey!("CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR"),
                ),
                rent: self.rent.unwrap_or(solana_program::pubkey!(
                    "SysvarRent111111111111111111111111111111111"
                )),
                clock: self.clock.expect("clock is not set"),
            };
        let args = ClaimCandyProvenInstructionArgs {
            wallet_bump: self.wallet_bump.clone().expect("wallet_bump is not set"),
            claim_bump: self.claim_bump.clone().expect("claim_bump is not set"),
            index: self.index.clone().expect("index is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `claim_candy_proven` CPI accounts.
pub struct ClaimCandyProvenCpiAccounts<'a, 'b> {
    /// The [MerkleDistributor].
    pub distributor: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [MerkleDistributor] wallet
    pub distributor_wallet: &'b solana_program::account_info::AccountInfo<'a>,
    /// Status of the claim. Created with prove_claim
    pub claim_proof: &'b solana_program::account_info::AccountInfo<'a>,
    /// Payer of the claim. Should be `mint_authority` for `candy_machine_mint` and will be
    /// `update_authority` for `candy_machine_metadata`
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// Candy-machine Config
    pub candy_machine_config: &'b solana_program::account_info::AccountInfo<'a>,
    /// Candy-Machine. Verified through CPI
    pub candy_machine: &'b solana_program::account_info::AccountInfo<'a>,
    /// Candy-Machine-Wallet. Verified through CPI
    pub candy_machine_wallet: &'b solana_program::account_info::AccountInfo<'a>,
    /// Generated mint
    pub candy_machine_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA of `candy_machine_mint`
    pub candy_machine_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA of `candy_machine_mint`
    pub candy_machine_master_edition: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [System] program.
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL [Token] program.
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL [TokenMetadata] program.
    pub token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL [CandyMachine] program.
    pub candy_machine_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub clock: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `claim_candy_proven` CPI instruction.
pub struct ClaimCandyProvenCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [MerkleDistributor].
    pub distributor: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [MerkleDistributor] wallet
    pub distributor_wallet: &'b solana_program::account_info::AccountInfo<'a>,
    /// Status of the claim. Created with prove_claim
    pub claim_proof: &'b solana_program::account_info::AccountInfo<'a>,
    /// Payer of the claim. Should be `mint_authority` for `candy_machine_mint` and will be
    /// `update_authority` for `candy_machine_metadata`
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// Candy-machine Config
    pub candy_machine_config: &'b solana_program::account_info::AccountInfo<'a>,
    /// Candy-Machine. Verified through CPI
    pub candy_machine: &'b solana_program::account_info::AccountInfo<'a>,
    /// Candy-Machine-Wallet. Verified through CPI
    pub candy_machine_wallet: &'b solana_program::account_info::AccountInfo<'a>,
    /// Generated mint
    pub candy_machine_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA of `candy_machine_mint`
    pub candy_machine_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA of `candy_machine_mint`
    pub candy_machine_master_edition: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [System] program.
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL [Token] program.
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL [TokenMetadata] program.
    pub token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL [CandyMachine] program.
    pub candy_machine_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub clock: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: ClaimCandyProvenInstructionArgs,
}

impl<'a, 'b> ClaimCandyProvenCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: ClaimCandyProvenCpiAccounts<'a, 'b>,
        args: ClaimCandyProvenInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            distributor: accounts.distributor,
            distributor_wallet: accounts.distributor_wallet,
            claim_proof: accounts.claim_proof,
            payer: accounts.payer,
            candy_machine_config: accounts.candy_machine_config,
            candy_machine: accounts.candy_machine,
            candy_machine_wallet: accounts.candy_machine_wallet,
            candy_machine_mint: accounts.candy_machine_mint,
            candy_machine_metadata: accounts.candy_machine_metadata,
            candy_machine_master_edition: accounts.candy_machine_master_edition,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            token_metadata_program: accounts.token_metadata_program,
            candy_machine_program: accounts.candy_machine_program,
            rent: accounts.rent,
            clock: accounts.clock,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(16 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.distributor.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.distributor_wallet.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.claim_proof.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.candy_machine_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.candy_machine.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.candy_machine_wallet.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.candy_machine_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.candy_machine_metadata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.candy_machine_master_edition.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_metadata_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.candy_machine_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.clock.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = ClaimCandyProvenInstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::GUMDROP_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(16 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.distributor.clone());
        account_infos.push(self.distributor_wallet.clone());
        account_infos.push(self.claim_proof.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.candy_machine_config.clone());
        account_infos.push(self.candy_machine.clone());
        account_infos.push(self.candy_machine_wallet.clone());
        account_infos.push(self.candy_machine_mint.clone());
        account_infos.push(self.candy_machine_metadata.clone());
        account_infos.push(self.candy_machine_master_edition.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.token_metadata_program.clone());
        account_infos.push(self.candy_machine_program.clone());
        account_infos.push(self.rent.clone());
        account_infos.push(self.clock.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `ClaimCandyProven` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` distributor
///   1. `[writable]` distributor_wallet
///   2. `[writable]` claim_proof
///   3. `[signer]` payer
///   4. `[]` candy_machine_config
///   5. `[writable]` candy_machine
///   6. `[writable]` candy_machine_wallet
///   7. `[writable]` candy_machine_mint
///   8. `[writable]` candy_machine_metadata
///   9. `[writable]` candy_machine_master_edition
///   10. `[]` system_program
///   11. `[]` token_program
///   12. `[]` token_metadata_program
///   13. `[]` candy_machine_program
///   14. `[]` rent
///   15. `[]` clock
pub struct ClaimCandyProvenCpiBuilder<'a, 'b> {
    instruction: Box<ClaimCandyProvenCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ClaimCandyProvenCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(ClaimCandyProvenCpiBuilderInstruction {
            __program: program,
            distributor: None,
            distributor_wallet: None,
            claim_proof: None,
            payer: None,
            candy_machine_config: None,
            candy_machine: None,
            candy_machine_wallet: None,
            candy_machine_mint: None,
            candy_machine_metadata: None,
            candy_machine_master_edition: None,
            system_program: None,
            token_program: None,
            token_metadata_program: None,
            candy_machine_program: None,
            rent: None,
            clock: None,
            wallet_bump: None,
            claim_bump: None,
            index: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The [MerkleDistributor].
    #[inline(always)]
    pub fn distributor(
        &mut self,
        distributor: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.distributor = Some(distributor);
        self
    }
    /// The [MerkleDistributor] wallet
    #[inline(always)]
    pub fn distributor_wallet(
        &mut self,
        distributor_wallet: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.distributor_wallet = Some(distributor_wallet);
        self
    }
    /// Status of the claim. Created with prove_claim
    #[inline(always)]
    pub fn claim_proof(
        &mut self,
        claim_proof: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.claim_proof = Some(claim_proof);
        self
    }
    /// Payer of the claim. Should be `mint_authority` for `candy_machine_mint` and will be
    /// `update_authority` for `candy_machine_metadata`
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    /// Candy-machine Config
    #[inline(always)]
    pub fn candy_machine_config(
        &mut self,
        candy_machine_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.candy_machine_config = Some(candy_machine_config);
        self
    }
    /// Candy-Machine. Verified through CPI
    #[inline(always)]
    pub fn candy_machine(
        &mut self,
        candy_machine: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.candy_machine = Some(candy_machine);
        self
    }
    /// Candy-Machine-Wallet. Verified through CPI
    #[inline(always)]
    pub fn candy_machine_wallet(
        &mut self,
        candy_machine_wallet: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.candy_machine_wallet = Some(candy_machine_wallet);
        self
    }
    /// Generated mint
    #[inline(always)]
    pub fn candy_machine_mint(
        &mut self,
        candy_machine_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.candy_machine_mint = Some(candy_machine_mint);
        self
    }
    /// PDA of `candy_machine_mint`
    #[inline(always)]
    pub fn candy_machine_metadata(
        &mut self,
        candy_machine_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.candy_machine_metadata = Some(candy_machine_metadata);
        self
    }
    /// PDA of `candy_machine_mint`
    #[inline(always)]
    pub fn candy_machine_master_edition(
        &mut self,
        candy_machine_master_edition: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.candy_machine_master_edition = Some(candy_machine_master_edition);
        self
    }
    /// The [System] program.
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// SPL [Token] program.
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// SPL [TokenMetadata] program.
    #[inline(always)]
    pub fn token_metadata_program(
        &mut self,
        token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_metadata_program = Some(token_metadata_program);
        self
    }
    /// SPL [CandyMachine] program.
    #[inline(always)]
    pub fn candy_machine_program(
        &mut self,
        candy_machine_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.candy_machine_program = Some(candy_machine_program);
        self
    }
    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }
    #[inline(always)]
    pub fn clock(&mut self, clock: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.clock = Some(clock);
        self
    }
    #[inline(always)]
    pub fn wallet_bump(&mut self, wallet_bump: u8) -> &mut Self {
        self.instruction.wallet_bump = Some(wallet_bump);
        self
    }
    #[inline(always)]
    pub fn claim_bump(&mut self, claim_bump: u8) -> &mut Self {
        self.instruction.claim_bump = Some(claim_bump);
        self
    }
    #[inline(always)]
    pub fn index(&mut self, index: u64) -> &mut Self {
        self.instruction.index = Some(index);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = ClaimCandyProvenInstructionArgs {
            wallet_bump: self
                .instruction
                .wallet_bump
                .clone()
                .expect("wallet_bump is not set"),
            claim_bump: self
                .instruction
                .claim_bump
                .clone()
                .expect("claim_bump is not set"),
            index: self.instruction.index.clone().expect("index is not set"),
        };
        let instruction = ClaimCandyProvenCpi {
            __program: self.instruction.__program,

            distributor: self
                .instruction
                .distributor
                .expect("distributor is not set"),

            distributor_wallet: self
                .instruction
                .distributor_wallet
                .expect("distributor_wallet is not set"),

            claim_proof: self
                .instruction
                .claim_proof
                .expect("claim_proof is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            candy_machine_config: self
                .instruction
                .candy_machine_config
                .expect("candy_machine_config is not set"),

            candy_machine: self
                .instruction
                .candy_machine
                .expect("candy_machine is not set"),

            candy_machine_wallet: self
                .instruction
                .candy_machine_wallet
                .expect("candy_machine_wallet is not set"),

            candy_machine_mint: self
                .instruction
                .candy_machine_mint
                .expect("candy_machine_mint is not set"),

            candy_machine_metadata: self
                .instruction
                .candy_machine_metadata
                .expect("candy_machine_metadata is not set"),

            candy_machine_master_edition: self
                .instruction
                .candy_machine_master_edition
                .expect("candy_machine_master_edition is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            token_metadata_program: self
                .instruction
                .token_metadata_program
                .expect("token_metadata_program is not set"),

            candy_machine_program: self
                .instruction
                .candy_machine_program
                .expect("candy_machine_program is not set"),

            rent: self.instruction.rent.expect("rent is not set"),

            clock: self.instruction.clock.expect("clock is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct ClaimCandyProvenCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    distributor: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    distributor_wallet: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    claim_proof: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    candy_machine_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    candy_machine: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    candy_machine_wallet: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    candy_machine_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    candy_machine_metadata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    candy_machine_master_edition: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    candy_machine_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    clock: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    wallet_bump: Option<u8>,
    claim_bump: Option<u8>,
    index: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
