//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use solana_program::pubkey::Pubkey;

/// Accounts.
pub struct ClaimEdition {
    /// Given a token account containing the master edition token to prove authority, and a brand new non-metadata-ed mint with one token
    /// make a new Metadata + Edition that is a child of the master edition denoted by this authority token.
    /// 4. `[writable]` Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number])
    /// where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE).
    /// 8. `[]` token account containing token from master metadata mint
    /// The [MerkleDistributor].
    pub distributor: solana_program::pubkey::Pubkey,
    /// Status of the claim. Created on first invocation of this function
    pub claim_count: solana_program::pubkey::Pubkey,
    /// Extra signer expected for claims
    pub temporal: solana_program::pubkey::Pubkey,
    /// Payer of the claim. Should be `mint_authority` for `candy_machine_mint` and will be
    /// `update_authority` for `candy_machine_metadata`
    pub payer: solana_program::pubkey::Pubkey,
    /// PDA of `metadata_new_mint`
    pub metadata_new_metadata: solana_program::pubkey::Pubkey,
    /// PDA of `metadata_new_mint`
    pub metadata_new_edition: solana_program::pubkey::Pubkey,
    /// PDA of `metadata_master_mint`
    pub metadata_master_edition: solana_program::pubkey::Pubkey,
    /// Generated mint
    pub metadata_new_mint: solana_program::pubkey::Pubkey,
    /// PDA of `metadata_master_mint` and edition number
    pub metadata_edition_mark_pda: solana_program::pubkey::Pubkey,
    /// Mint authority for `metadata_new_mint`
    pub metadata_new_mint_authority: solana_program::pubkey::Pubkey,
    /// Owner of token account containing master token (#8)
    /// distributor
    /// Token account
    pub metadata_master_token_account: solana_program::pubkey::Pubkey,
    /// Update authority for new metadata
    pub metadata_new_update_authority: solana_program::pubkey::Pubkey,
    /// Master record metadata account
    pub metadata_master_metadata: solana_program::pubkey::Pubkey,
    /// Master metadata mint account
    pub metadata_master_mint: solana_program::pubkey::Pubkey,
    /// The [System] program.
    pub system_program: solana_program::pubkey::Pubkey,
    /// SPL [Token] program.
    pub token_program: solana_program::pubkey::Pubkey,
    /// SPL [TokenMetadata] program.
    pub token_metadata_program: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,
}

impl ClaimEdition {
    pub fn instruction(
        &self,
        args: ClaimEditionInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: ClaimEditionInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(18 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.distributor,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.claim_count,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.temporal,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.metadata_new_metadata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.metadata_new_edition,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.metadata_master_edition,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.metadata_new_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.metadata_edition_mark_pda,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.metadata_new_mint_authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.metadata_master_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.metadata_new_update_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.metadata_master_metadata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.metadata_master_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_metadata_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = ClaimEditionInstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::GUMDROP_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
struct ClaimEditionInstructionData {
    discriminator: [u8; 8],
}

impl ClaimEditionInstructionData {
    fn new() -> Self {
        Self {
            discriminator: [150, 83, 124, 180, 53, 35, 144, 248],
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ClaimEditionInstructionArgs {
    pub claim_bump: u8,
    pub index: u64,
    pub amount: u64,
    pub edition: u64,
    pub claimant_secret: Pubkey,
    pub proof: Vec<[u8; 32]>,
}

/// Instruction builder for `ClaimEdition`.
///
/// ### Accounts:
///
///   0. `[writable]` distributor
///   1. `[writable]` claim_count
///   2. `[signer]` temporal
///   3. `[signer]` payer
///   4. `[writable]` metadata_new_metadata
///   5. `[writable]` metadata_new_edition
///   6. `[writable]` metadata_master_edition
///   7. `[writable]` metadata_new_mint
///   8. `[writable]` metadata_edition_mark_pda
///   9. `[signer]` metadata_new_mint_authority
///   10. `[]` metadata_master_token_account
///   11. `[]` metadata_new_update_authority
///   12. `[]` metadata_master_metadata
///   13. `[]` metadata_master_mint
///   14. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   15. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   16. `[optional]` token_metadata_program (default to `metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s`)
///   17. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
#[derive(Default)]
pub struct ClaimEditionBuilder {
    distributor: Option<solana_program::pubkey::Pubkey>,
    claim_count: Option<solana_program::pubkey::Pubkey>,
    temporal: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    metadata_new_metadata: Option<solana_program::pubkey::Pubkey>,
    metadata_new_edition: Option<solana_program::pubkey::Pubkey>,
    metadata_master_edition: Option<solana_program::pubkey::Pubkey>,
    metadata_new_mint: Option<solana_program::pubkey::Pubkey>,
    metadata_edition_mark_pda: Option<solana_program::pubkey::Pubkey>,
    metadata_new_mint_authority: Option<solana_program::pubkey::Pubkey>,
    metadata_master_token_account: Option<solana_program::pubkey::Pubkey>,
    metadata_new_update_authority: Option<solana_program::pubkey::Pubkey>,
    metadata_master_metadata: Option<solana_program::pubkey::Pubkey>,
    metadata_master_mint: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    token_metadata_program: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    claim_bump: Option<u8>,
    index: Option<u64>,
    amount: Option<u64>,
    edition: Option<u64>,
    claimant_secret: Option<Pubkey>,
    proof: Option<Vec<[u8; 32]>>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl ClaimEditionBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// Given a token account containing the master edition token to prove authority, and a brand new non-metadata-ed mint with one token
    /// make a new Metadata + Edition that is a child of the master edition denoted by this authority token.
    /// 4. `[writable]` Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number])
    /// where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE).
    /// 8. `[]` token account containing token from master metadata mint
    /// The [MerkleDistributor].
    #[inline(always)]
    pub fn distributor(&mut self, distributor: solana_program::pubkey::Pubkey) -> &mut Self {
        self.distributor = Some(distributor);
        self
    }
    /// Status of the claim. Created on first invocation of this function
    #[inline(always)]
    pub fn claim_count(&mut self, claim_count: solana_program::pubkey::Pubkey) -> &mut Self {
        self.claim_count = Some(claim_count);
        self
    }
    /// Extra signer expected for claims
    #[inline(always)]
    pub fn temporal(&mut self, temporal: solana_program::pubkey::Pubkey) -> &mut Self {
        self.temporal = Some(temporal);
        self
    }
    /// Payer of the claim. Should be `mint_authority` for `candy_machine_mint` and will be
    /// `update_authority` for `candy_machine_metadata`
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// PDA of `metadata_new_mint`
    #[inline(always)]
    pub fn metadata_new_metadata(
        &mut self,
        metadata_new_metadata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.metadata_new_metadata = Some(metadata_new_metadata);
        self
    }
    /// PDA of `metadata_new_mint`
    #[inline(always)]
    pub fn metadata_new_edition(
        &mut self,
        metadata_new_edition: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.metadata_new_edition = Some(metadata_new_edition);
        self
    }
    /// PDA of `metadata_master_mint`
    #[inline(always)]
    pub fn metadata_master_edition(
        &mut self,
        metadata_master_edition: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.metadata_master_edition = Some(metadata_master_edition);
        self
    }
    /// Generated mint
    #[inline(always)]
    pub fn metadata_new_mint(
        &mut self,
        metadata_new_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.metadata_new_mint = Some(metadata_new_mint);
        self
    }
    /// PDA of `metadata_master_mint` and edition number
    #[inline(always)]
    pub fn metadata_edition_mark_pda(
        &mut self,
        metadata_edition_mark_pda: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.metadata_edition_mark_pda = Some(metadata_edition_mark_pda);
        self
    }
    /// Mint authority for `metadata_new_mint`
    #[inline(always)]
    pub fn metadata_new_mint_authority(
        &mut self,
        metadata_new_mint_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.metadata_new_mint_authority = Some(metadata_new_mint_authority);
        self
    }
    /// Owner of token account containing master token (#8)
    /// distributor
    /// Token account
    #[inline(always)]
    pub fn metadata_master_token_account(
        &mut self,
        metadata_master_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.metadata_master_token_account = Some(metadata_master_token_account);
        self
    }
    /// Update authority for new metadata
    #[inline(always)]
    pub fn metadata_new_update_authority(
        &mut self,
        metadata_new_update_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.metadata_new_update_authority = Some(metadata_new_update_authority);
        self
    }
    /// Master record metadata account
    #[inline(always)]
    pub fn metadata_master_metadata(
        &mut self,
        metadata_master_metadata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.metadata_master_metadata = Some(metadata_master_metadata);
        self
    }
    /// Master metadata mint account
    #[inline(always)]
    pub fn metadata_master_mint(
        &mut self,
        metadata_master_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.metadata_master_mint = Some(metadata_master_mint);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    /// The [System] program.
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// SPL [Token] program.
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// `[optional account, default to 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s']`
    /// SPL [TokenMetadata] program.
    #[inline(always)]
    pub fn token_metadata_program(
        &mut self,
        token_metadata_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_metadata_program = Some(token_metadata_program);
        self
    }
    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }
    #[inline(always)]
    pub fn claim_bump(&mut self, claim_bump: u8) -> &mut Self {
        self.claim_bump = Some(claim_bump);
        self
    }
    #[inline(always)]
    pub fn index(&mut self, index: u64) -> &mut Self {
        self.index = Some(index);
        self
    }
    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.amount = Some(amount);
        self
    }
    #[inline(always)]
    pub fn edition(&mut self, edition: u64) -> &mut Self {
        self.edition = Some(edition);
        self
    }
    #[inline(always)]
    pub fn claimant_secret(&mut self, claimant_secret: Pubkey) -> &mut Self {
        self.claimant_secret = Some(claimant_secret);
        self
    }
    #[inline(always)]
    pub fn proof(&mut self, proof: Vec<[u8; 32]>) -> &mut Self {
        self.proof = Some(proof);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts =
            ClaimEdition {
                distributor: self.distributor.expect("distributor is not set"),
                claim_count: self.claim_count.expect("claim_count is not set"),
                temporal: self.temporal.expect("temporal is not set"),
                payer: self.payer.expect("payer is not set"),
                metadata_new_metadata: self
                    .metadata_new_metadata
                    .expect("metadata_new_metadata is not set"),
                metadata_new_edition: self
                    .metadata_new_edition
                    .expect("metadata_new_edition is not set"),
                metadata_master_edition: self
                    .metadata_master_edition
                    .expect("metadata_master_edition is not set"),
                metadata_new_mint: self
                    .metadata_new_mint
                    .expect("metadata_new_mint is not set"),
                metadata_edition_mark_pda: self
                    .metadata_edition_mark_pda
                    .expect("metadata_edition_mark_pda is not set"),
                metadata_new_mint_authority: self
                    .metadata_new_mint_authority
                    .expect("metadata_new_mint_authority is not set"),
                metadata_master_token_account: self
                    .metadata_master_token_account
                    .expect("metadata_master_token_account is not set"),
                metadata_new_update_authority: self
                    .metadata_new_update_authority
                    .expect("metadata_new_update_authority is not set"),
                metadata_master_metadata: self
                    .metadata_master_metadata
                    .expect("metadata_master_metadata is not set"),
                metadata_master_mint: self
                    .metadata_master_mint
                    .expect("metadata_master_mint is not set"),
                system_program: self
                    .system_program
                    .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                    "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
                )),
                token_metadata_program: self.token_metadata_program.unwrap_or(
                    solana_program::pubkey!("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"),
                ),
                rent: self.rent.unwrap_or(solana_program::pubkey!(
                    "SysvarRent111111111111111111111111111111111"
                )),
            };
        let args = ClaimEditionInstructionArgs {
            claim_bump: self.claim_bump.clone().expect("claim_bump is not set"),
            index: self.index.clone().expect("index is not set"),
            amount: self.amount.clone().expect("amount is not set"),
            edition: self.edition.clone().expect("edition is not set"),
            claimant_secret: self
                .claimant_secret
                .clone()
                .expect("claimant_secret is not set"),
            proof: self.proof.clone().expect("proof is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `claim_edition` CPI accounts.
pub struct ClaimEditionCpiAccounts<'a, 'b> {
    /// Given a token account containing the master edition token to prove authority, and a brand new non-metadata-ed mint with one token
    /// make a new Metadata + Edition that is a child of the master edition denoted by this authority token.
    /// 4. `[writable]` Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number])
    /// where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE).
    /// 8. `[]` token account containing token from master metadata mint
    /// The [MerkleDistributor].
    pub distributor: &'b solana_program::account_info::AccountInfo<'a>,
    /// Status of the claim. Created on first invocation of this function
    pub claim_count: &'b solana_program::account_info::AccountInfo<'a>,
    /// Extra signer expected for claims
    pub temporal: &'b solana_program::account_info::AccountInfo<'a>,
    /// Payer of the claim. Should be `mint_authority` for `candy_machine_mint` and will be
    /// `update_authority` for `candy_machine_metadata`
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA of `metadata_new_mint`
    pub metadata_new_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA of `metadata_new_mint`
    pub metadata_new_edition: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA of `metadata_master_mint`
    pub metadata_master_edition: &'b solana_program::account_info::AccountInfo<'a>,
    /// Generated mint
    pub metadata_new_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA of `metadata_master_mint` and edition number
    pub metadata_edition_mark_pda: &'b solana_program::account_info::AccountInfo<'a>,
    /// Mint authority for `metadata_new_mint`
    pub metadata_new_mint_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Owner of token account containing master token (#8)
    /// distributor
    /// Token account
    pub metadata_master_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Update authority for new metadata
    pub metadata_new_update_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Master record metadata account
    pub metadata_master_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    /// Master metadata mint account
    pub metadata_master_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [System] program.
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL [Token] program.
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL [TokenMetadata] program.
    pub token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `claim_edition` CPI instruction.
pub struct ClaimEditionCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Given a token account containing the master edition token to prove authority, and a brand new non-metadata-ed mint with one token
    /// make a new Metadata + Edition that is a child of the master edition denoted by this authority token.
    /// 4. `[writable]` Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number])
    /// where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE).
    /// 8. `[]` token account containing token from master metadata mint
    /// The [MerkleDistributor].
    pub distributor: &'b solana_program::account_info::AccountInfo<'a>,
    /// Status of the claim. Created on first invocation of this function
    pub claim_count: &'b solana_program::account_info::AccountInfo<'a>,
    /// Extra signer expected for claims
    pub temporal: &'b solana_program::account_info::AccountInfo<'a>,
    /// Payer of the claim. Should be `mint_authority` for `candy_machine_mint` and will be
    /// `update_authority` for `candy_machine_metadata`
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA of `metadata_new_mint`
    pub metadata_new_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA of `metadata_new_mint`
    pub metadata_new_edition: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA of `metadata_master_mint`
    pub metadata_master_edition: &'b solana_program::account_info::AccountInfo<'a>,
    /// Generated mint
    pub metadata_new_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA of `metadata_master_mint` and edition number
    pub metadata_edition_mark_pda: &'b solana_program::account_info::AccountInfo<'a>,
    /// Mint authority for `metadata_new_mint`
    pub metadata_new_mint_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Owner of token account containing master token (#8)
    /// distributor
    /// Token account
    pub metadata_master_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Update authority for new metadata
    pub metadata_new_update_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Master record metadata account
    pub metadata_master_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    /// Master metadata mint account
    pub metadata_master_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The [System] program.
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL [Token] program.
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL [TokenMetadata] program.
    pub token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: ClaimEditionInstructionArgs,
}

impl<'a, 'b> ClaimEditionCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: ClaimEditionCpiAccounts<'a, 'b>,
        args: ClaimEditionInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            distributor: accounts.distributor,
            claim_count: accounts.claim_count,
            temporal: accounts.temporal,
            payer: accounts.payer,
            metadata_new_metadata: accounts.metadata_new_metadata,
            metadata_new_edition: accounts.metadata_new_edition,
            metadata_master_edition: accounts.metadata_master_edition,
            metadata_new_mint: accounts.metadata_new_mint,
            metadata_edition_mark_pda: accounts.metadata_edition_mark_pda,
            metadata_new_mint_authority: accounts.metadata_new_mint_authority,
            metadata_master_token_account: accounts.metadata_master_token_account,
            metadata_new_update_authority: accounts.metadata_new_update_authority,
            metadata_master_metadata: accounts.metadata_master_metadata,
            metadata_master_mint: accounts.metadata_master_mint,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            token_metadata_program: accounts.token_metadata_program,
            rent: accounts.rent,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(18 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.distributor.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.claim_count.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.temporal.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.metadata_new_metadata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.metadata_new_edition.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.metadata_master_edition.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.metadata_new_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.metadata_edition_mark_pda.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.metadata_new_mint_authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.metadata_master_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.metadata_new_update_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.metadata_master_metadata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.metadata_master_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_metadata_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = ClaimEditionInstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::GUMDROP_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(18 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.distributor.clone());
        account_infos.push(self.claim_count.clone());
        account_infos.push(self.temporal.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.metadata_new_metadata.clone());
        account_infos.push(self.metadata_new_edition.clone());
        account_infos.push(self.metadata_master_edition.clone());
        account_infos.push(self.metadata_new_mint.clone());
        account_infos.push(self.metadata_edition_mark_pda.clone());
        account_infos.push(self.metadata_new_mint_authority.clone());
        account_infos.push(self.metadata_master_token_account.clone());
        account_infos.push(self.metadata_new_update_authority.clone());
        account_infos.push(self.metadata_master_metadata.clone());
        account_infos.push(self.metadata_master_mint.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.token_metadata_program.clone());
        account_infos.push(self.rent.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `ClaimEdition` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` distributor
///   1. `[writable]` claim_count
///   2. `[signer]` temporal
///   3. `[signer]` payer
///   4. `[writable]` metadata_new_metadata
///   5. `[writable]` metadata_new_edition
///   6. `[writable]` metadata_master_edition
///   7. `[writable]` metadata_new_mint
///   8. `[writable]` metadata_edition_mark_pda
///   9. `[signer]` metadata_new_mint_authority
///   10. `[]` metadata_master_token_account
///   11. `[]` metadata_new_update_authority
///   12. `[]` metadata_master_metadata
///   13. `[]` metadata_master_mint
///   14. `[]` system_program
///   15. `[]` token_program
///   16. `[]` token_metadata_program
///   17. `[]` rent
pub struct ClaimEditionCpiBuilder<'a, 'b> {
    instruction: Box<ClaimEditionCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ClaimEditionCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(ClaimEditionCpiBuilderInstruction {
            __program: program,
            distributor: None,
            claim_count: None,
            temporal: None,
            payer: None,
            metadata_new_metadata: None,
            metadata_new_edition: None,
            metadata_master_edition: None,
            metadata_new_mint: None,
            metadata_edition_mark_pda: None,
            metadata_new_mint_authority: None,
            metadata_master_token_account: None,
            metadata_new_update_authority: None,
            metadata_master_metadata: None,
            metadata_master_mint: None,
            system_program: None,
            token_program: None,
            token_metadata_program: None,
            rent: None,
            claim_bump: None,
            index: None,
            amount: None,
            edition: None,
            claimant_secret: None,
            proof: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// Given a token account containing the master edition token to prove authority, and a brand new non-metadata-ed mint with one token
    /// make a new Metadata + Edition that is a child of the master edition denoted by this authority token.
    /// 4. `[writable]` Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master metadata mint id, 'edition', edition_number])
    /// where edition_number is NOT the edition number you pass in args but actually edition_number = floor(edition/EDITION_MARKER_BIT_SIZE).
    /// 8. `[]` token account containing token from master metadata mint
    /// The [MerkleDistributor].
    #[inline(always)]
    pub fn distributor(
        &mut self,
        distributor: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.distributor = Some(distributor);
        self
    }
    /// Status of the claim. Created on first invocation of this function
    #[inline(always)]
    pub fn claim_count(
        &mut self,
        claim_count: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.claim_count = Some(claim_count);
        self
    }
    /// Extra signer expected for claims
    #[inline(always)]
    pub fn temporal(
        &mut self,
        temporal: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.temporal = Some(temporal);
        self
    }
    /// Payer of the claim. Should be `mint_authority` for `candy_machine_mint` and will be
    /// `update_authority` for `candy_machine_metadata`
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    /// PDA of `metadata_new_mint`
    #[inline(always)]
    pub fn metadata_new_metadata(
        &mut self,
        metadata_new_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata_new_metadata = Some(metadata_new_metadata);
        self
    }
    /// PDA of `metadata_new_mint`
    #[inline(always)]
    pub fn metadata_new_edition(
        &mut self,
        metadata_new_edition: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata_new_edition = Some(metadata_new_edition);
        self
    }
    /// PDA of `metadata_master_mint`
    #[inline(always)]
    pub fn metadata_master_edition(
        &mut self,
        metadata_master_edition: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata_master_edition = Some(metadata_master_edition);
        self
    }
    /// Generated mint
    #[inline(always)]
    pub fn metadata_new_mint(
        &mut self,
        metadata_new_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata_new_mint = Some(metadata_new_mint);
        self
    }
    /// PDA of `metadata_master_mint` and edition number
    #[inline(always)]
    pub fn metadata_edition_mark_pda(
        &mut self,
        metadata_edition_mark_pda: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata_edition_mark_pda = Some(metadata_edition_mark_pda);
        self
    }
    /// Mint authority for `metadata_new_mint`
    #[inline(always)]
    pub fn metadata_new_mint_authority(
        &mut self,
        metadata_new_mint_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata_new_mint_authority = Some(metadata_new_mint_authority);
        self
    }
    /// Owner of token account containing master token (#8)
    /// distributor
    /// Token account
    #[inline(always)]
    pub fn metadata_master_token_account(
        &mut self,
        metadata_master_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata_master_token_account = Some(metadata_master_token_account);
        self
    }
    /// Update authority for new metadata
    #[inline(always)]
    pub fn metadata_new_update_authority(
        &mut self,
        metadata_new_update_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata_new_update_authority = Some(metadata_new_update_authority);
        self
    }
    /// Master record metadata account
    #[inline(always)]
    pub fn metadata_master_metadata(
        &mut self,
        metadata_master_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata_master_metadata = Some(metadata_master_metadata);
        self
    }
    /// Master metadata mint account
    #[inline(always)]
    pub fn metadata_master_mint(
        &mut self,
        metadata_master_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata_master_mint = Some(metadata_master_mint);
        self
    }
    /// The [System] program.
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// SPL [Token] program.
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// SPL [TokenMetadata] program.
    #[inline(always)]
    pub fn token_metadata_program(
        &mut self,
        token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_metadata_program = Some(token_metadata_program);
        self
    }
    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }
    #[inline(always)]
    pub fn claim_bump(&mut self, claim_bump: u8) -> &mut Self {
        self.instruction.claim_bump = Some(claim_bump);
        self
    }
    #[inline(always)]
    pub fn index(&mut self, index: u64) -> &mut Self {
        self.instruction.index = Some(index);
        self
    }
    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.instruction.amount = Some(amount);
        self
    }
    #[inline(always)]
    pub fn edition(&mut self, edition: u64) -> &mut Self {
        self.instruction.edition = Some(edition);
        self
    }
    #[inline(always)]
    pub fn claimant_secret(&mut self, claimant_secret: Pubkey) -> &mut Self {
        self.instruction.claimant_secret = Some(claimant_secret);
        self
    }
    #[inline(always)]
    pub fn proof(&mut self, proof: Vec<[u8; 32]>) -> &mut Self {
        self.instruction.proof = Some(proof);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = ClaimEditionInstructionArgs {
            claim_bump: self
                .instruction
                .claim_bump
                .clone()
                .expect("claim_bump is not set"),
            index: self.instruction.index.clone().expect("index is not set"),
            amount: self.instruction.amount.clone().expect("amount is not set"),
            edition: self
                .instruction
                .edition
                .clone()
                .expect("edition is not set"),
            claimant_secret: self
                .instruction
                .claimant_secret
                .clone()
                .expect("claimant_secret is not set"),
            proof: self.instruction.proof.clone().expect("proof is not set"),
        };
        let instruction = ClaimEditionCpi {
            __program: self.instruction.__program,

            distributor: self
                .instruction
                .distributor
                .expect("distributor is not set"),

            claim_count: self
                .instruction
                .claim_count
                .expect("claim_count is not set"),

            temporal: self.instruction.temporal.expect("temporal is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            metadata_new_metadata: self
                .instruction
                .metadata_new_metadata
                .expect("metadata_new_metadata is not set"),

            metadata_new_edition: self
                .instruction
                .metadata_new_edition
                .expect("metadata_new_edition is not set"),

            metadata_master_edition: self
                .instruction
                .metadata_master_edition
                .expect("metadata_master_edition is not set"),

            metadata_new_mint: self
                .instruction
                .metadata_new_mint
                .expect("metadata_new_mint is not set"),

            metadata_edition_mark_pda: self
                .instruction
                .metadata_edition_mark_pda
                .expect("metadata_edition_mark_pda is not set"),

            metadata_new_mint_authority: self
                .instruction
                .metadata_new_mint_authority
                .expect("metadata_new_mint_authority is not set"),

            metadata_master_token_account: self
                .instruction
                .metadata_master_token_account
                .expect("metadata_master_token_account is not set"),

            metadata_new_update_authority: self
                .instruction
                .metadata_new_update_authority
                .expect("metadata_new_update_authority is not set"),

            metadata_master_metadata: self
                .instruction
                .metadata_master_metadata
                .expect("metadata_master_metadata is not set"),

            metadata_master_mint: self
                .instruction
                .metadata_master_mint
                .expect("metadata_master_mint is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            token_metadata_program: self
                .instruction
                .token_metadata_program
                .expect("token_metadata_program is not set"),

            rent: self.instruction.rent.expect("rent is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct ClaimEditionCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    distributor: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    claim_count: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    temporal: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata_new_metadata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata_new_edition: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata_master_edition: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata_new_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata_edition_mark_pda: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata_new_mint_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata_master_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata_new_update_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata_master_metadata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata_master_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    claim_bump: Option<u8>,
    index: Option<u64>,
    amount: Option<u64>,
    edition: Option<u64>,
    claimant_secret: Option<Pubkey>,
    proof: Option<Vec<[u8; 32]>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
