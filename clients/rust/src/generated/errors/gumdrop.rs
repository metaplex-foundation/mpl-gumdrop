//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum GumdropError {
    /// 6000 (0x1770) - Invalid Merkle proof.
    #[error("Invalid Merkle proof.")]
    InvalidProof,
    /// 6001 (0x1771) - Drop already claimed.
    #[error("Drop already claimed.")]
    DropAlreadyClaimed,
    /// 6002 (0x1772) - Account is not authorized to execute this instruction
    #[error("Account is not authorized to execute this instruction")]
    Unauthorized,
    /// 6003 (0x1773) - Token account owner did not match intended owner
    #[error("Token account owner did not match intended owner")]
    OwnerMismatch,
    /// 6004 (0x1774) - Temporal signer did not match distributor
    #[error("Temporal signer did not match distributor")]
    TemporalMismatch,
    /// 6005 (0x1775) - Numerical Overflow
    #[error("Numerical Overflow")]
    NumericalOverflow,
    /// 6006 (0x1776) - Invalid Claim Bump
    #[error("Invalid Claim Bump")]
    InvalidClaimBump,
    /// 6007 (0x1777) - Gumdrop only supports the official Metaplex Candy machine contracts
    #[error("Gumdrop only supports the official Metaplex Candy machine contracts")]
    MustUseOfficialCandyMachine,
    /// 6008 (0x1778) - Bump seed not in hash map
    #[error("Bump seed not in hash map")]
    BumpSeedNotInHashMap,
}

impl solana_program::program_error::PrintProgramError for GumdropError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}
