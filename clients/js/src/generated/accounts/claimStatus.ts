/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bool,
  i64,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type ClaimStatus = Account<ClaimStatusAccountData>;

export type ClaimStatusAccountData = {
  discriminator: Array<number>;
  /** If true, the tokens have been claimed. */
  isClaimed: boolean;
  /** Authority that claimed the tokens. */
  claimant: PublicKey;
  /** When the tokens were claimed. */
  claimedAt: bigint;
  /** Amount of tokens claimed. */
  amount: bigint;
};

export type ClaimStatusAccountDataArgs = {
  /** If true, the tokens have been claimed. */
  isClaimed: boolean;
  /** Authority that claimed the tokens. */
  claimant: PublicKey;
  /** When the tokens were claimed. */
  claimedAt: number | bigint;
  /** Amount of tokens claimed. */
  amount: number | bigint;
};

export function getClaimStatusAccountDataSerializer(): Serializer<
  ClaimStatusAccountDataArgs,
  ClaimStatusAccountData
> {
  return mapSerializer<ClaimStatusAccountDataArgs, any, ClaimStatusAccountData>(
    struct<ClaimStatusAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['isClaimed', bool()],
        ['claimant', publicKeySerializer()],
        ['claimedAt', i64()],
        ['amount', u64()],
      ],
      { description: 'ClaimStatusAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [22, 183, 249, 157, 247, 95, 150, 96],
    })
  ) as Serializer<ClaimStatusAccountDataArgs, ClaimStatusAccountData>;
}

export function deserializeClaimStatus(rawAccount: RpcAccount): ClaimStatus {
  return deserializeAccount(rawAccount, getClaimStatusAccountDataSerializer());
}

export async function fetchClaimStatus(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ClaimStatus> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'ClaimStatus');
  return deserializeClaimStatus(maybeAccount);
}

export async function safeFetchClaimStatus(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ClaimStatus | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeClaimStatus(maybeAccount) : null;
}

export async function fetchAllClaimStatus(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ClaimStatus[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'ClaimStatus');
    return deserializeClaimStatus(maybeAccount);
  });
}

export async function safeFetchAllClaimStatus(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ClaimStatus[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeClaimStatus(maybeAccount as RpcAccount));
}

export function getClaimStatusGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'gumdrop',
    'gdrpGjVffourzkdDRrQmySw4aTHr8a3xmQzzxSwFD1a'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      isClaimed: boolean;
      claimant: PublicKey;
      claimedAt: number | bigint;
      amount: number | bigint;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      isClaimed: [8, bool()],
      claimant: [9, publicKeySerializer()],
      claimedAt: [41, i64()],
      amount: [49, u64()],
    })
    .deserializeUsing<ClaimStatus>((account) => deserializeClaimStatus(account))
    .whereField('discriminator', [22, 183, 249, 157, 247, 95, 150, 96]);
}

export function getClaimStatusSize(): number {
  return 57;
}
