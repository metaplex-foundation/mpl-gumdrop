/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u32,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

/**
 * Allows for proof and candy minting in separate transactions to avoid transaction-size limit.
 *
 * Used for all resources (tokens, candy claims, and edition mints)
 */

export type ClaimProof = Account<ClaimProofAccountData>;

export type ClaimProofAccountData = {
  discriminator: Array<number>;
  /** Total number of NFTs that can be claimed */
  amount: bigint;
  /** Number of NFTs claimed. Compared versus `amount` in merkle tree data / proof */
  count: bigint;
  /** Authority that claimed the tokens. */
  claimant: PublicKey;
  /** Resource allocated for this gumdrop. There should only be 1 per gumdrop */
  resource: PublicKey;
  resourceNonce: Uint8Array;
};

export type ClaimProofAccountDataArgs = {
  /** Total number of NFTs that can be claimed */
  amount: number | bigint;
  /** Number of NFTs claimed. Compared versus `amount` in merkle tree data / proof */
  count: number | bigint;
  /** Authority that claimed the tokens. */
  claimant: PublicKey;
  /** Resource allocated for this gumdrop. There should only be 1 per gumdrop */
  resource: PublicKey;
  resourceNonce: Uint8Array;
};

export function getClaimProofAccountDataSerializer(): Serializer<
  ClaimProofAccountDataArgs,
  ClaimProofAccountData
> {
  return mapSerializer<ClaimProofAccountDataArgs, any, ClaimProofAccountData>(
    struct<ClaimProofAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['amount', u64()],
        ['count', u64()],
        ['claimant', publicKeySerializer()],
        ['resource', publicKeySerializer()],
        ['resourceNonce', bytes({ size: u32() })],
      ],
      { description: 'ClaimProofAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [48, 173, 176, 137, 53, 116, 40, 112],
    })
  ) as Serializer<ClaimProofAccountDataArgs, ClaimProofAccountData>;
}

export function deserializeClaimProof(rawAccount: RpcAccount): ClaimProof {
  return deserializeAccount(rawAccount, getClaimProofAccountDataSerializer());
}

export async function fetchClaimProof(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ClaimProof> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'ClaimProof');
  return deserializeClaimProof(maybeAccount);
}

export async function safeFetchClaimProof(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ClaimProof | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeClaimProof(maybeAccount) : null;
}

export async function fetchAllClaimProof(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ClaimProof[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'ClaimProof');
    return deserializeClaimProof(maybeAccount);
  });
}

export async function safeFetchAllClaimProof(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ClaimProof[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeClaimProof(maybeAccount as RpcAccount));
}

export function getClaimProofGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'gumdrop',
    'gdrpGjVffourzkdDRrQmySw4aTHr8a3xmQzzxSwFD1a'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      amount: number | bigint;
      count: number | bigint;
      claimant: PublicKey;
      resource: PublicKey;
      resourceNonce: Uint8Array;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      amount: [8, u64()],
      count: [16, u64()],
      claimant: [24, publicKeySerializer()],
      resource: [56, publicKeySerializer()],
      resourceNonce: [88, bytes({ size: u32() })],
    })
    .deserializeUsing<ClaimProof>((account) => deserializeClaimProof(account))
    .whereField('discriminator', [48, 173, 176, 137, 53, 116, 40, 112]);
}
