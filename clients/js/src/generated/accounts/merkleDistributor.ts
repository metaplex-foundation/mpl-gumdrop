/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';

/** State for the account which distributes tokens. */
export type MerkleDistributor = Account<MerkleDistributorAccountData>;

export type MerkleDistributorAccountData = {
  discriminator: Array<number>;
  /** Base key used to generate the PDA. */
  base: PublicKey;
  /** Bump seed. */
  bump: number;
  /** The 256-bit merkle root. */
  root: Uint8Array;
  /** Third-party signer expected on claims. Verified by OTP with off-chain distribution method */
  temporal: PublicKey;
};

export type MerkleDistributorAccountDataArgs = {
  /** Base key used to generate the PDA. */
  base: PublicKey;
  /** Bump seed. */
  bump: number;
  /** The 256-bit merkle root. */
  root: Uint8Array;
  /** Third-party signer expected on claims. Verified by OTP with off-chain distribution method */
  temporal: PublicKey;
};

export function getMerkleDistributorAccountDataSerializer(): Serializer<
  MerkleDistributorAccountDataArgs,
  MerkleDistributorAccountData
> {
  return mapSerializer<
    MerkleDistributorAccountDataArgs,
    any,
    MerkleDistributorAccountData
  >(
    struct<MerkleDistributorAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['base', publicKeySerializer()],
        ['bump', u8()],
        ['root', bytes({ size: 32 })],
        ['temporal', publicKeySerializer()],
      ],
      { description: 'MerkleDistributorAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [77, 119, 139, 70, 84, 247, 12, 26],
    })
  ) as Serializer<
    MerkleDistributorAccountDataArgs,
    MerkleDistributorAccountData
  >;
}

export function deserializeMerkleDistributor(
  rawAccount: RpcAccount
): MerkleDistributor {
  return deserializeAccount(
    rawAccount,
    getMerkleDistributorAccountDataSerializer()
  );
}

export async function fetchMerkleDistributor(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<MerkleDistributor> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'MerkleDistributor');
  return deserializeMerkleDistributor(maybeAccount);
}

export async function safeFetchMerkleDistributor(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<MerkleDistributor | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists
    ? deserializeMerkleDistributor(maybeAccount)
    : null;
}

export async function fetchAllMerkleDistributor(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<MerkleDistributor[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'MerkleDistributor');
    return deserializeMerkleDistributor(maybeAccount);
  });
}

export async function safeFetchAllMerkleDistributor(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<MerkleDistributor[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeMerkleDistributor(maybeAccount as RpcAccount)
    );
}

export function getMerkleDistributorGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'gumdrop',
    'gdrpGjVffourzkdDRrQmySw4aTHr8a3xmQzzxSwFD1a'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      base: PublicKey;
      bump: number;
      root: Uint8Array;
      temporal: PublicKey;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      base: [8, publicKeySerializer()],
      bump: [40, u8()],
      root: [41, bytes({ size: 32 })],
      temporal: [73, publicKeySerializer()],
    })
    .deserializeUsing<MerkleDistributor>((account) =>
      deserializeMerkleDistributor(account)
    )
    .whereField('discriminator', [77, 119, 139, 70, 84, 247, 12, 26]);
}

export function getMerkleDistributorSize(): number {
  return 105;
}
