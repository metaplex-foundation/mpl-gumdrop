/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type ClaimCount = Account<ClaimCountAccountData>;

export type ClaimCountAccountData = {
  discriminator: Array<number>;
  /** Number of NFTs claimed. Compared versus `amount` in merkle tree data / proof */
  count: bigint;
  /** Authority that claimed the tokens. */
  claimant: PublicKey;
};

export type ClaimCountAccountDataArgs = {
  /** Number of NFTs claimed. Compared versus `amount` in merkle tree data / proof */
  count: number | bigint;
  /** Authority that claimed the tokens. */
  claimant: PublicKey;
};

export function getClaimCountAccountDataSerializer(): Serializer<
  ClaimCountAccountDataArgs,
  ClaimCountAccountData
> {
  return mapSerializer<ClaimCountAccountDataArgs, any, ClaimCountAccountData>(
    struct<ClaimCountAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['count', u64()],
        ['claimant', publicKeySerializer()],
      ],
      { description: 'ClaimCountAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [78, 134, 220, 213, 34, 152, 102, 167],
    })
  ) as Serializer<ClaimCountAccountDataArgs, ClaimCountAccountData>;
}

export function deserializeClaimCount(rawAccount: RpcAccount): ClaimCount {
  return deserializeAccount(rawAccount, getClaimCountAccountDataSerializer());
}

export async function fetchClaimCount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ClaimCount> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'ClaimCount');
  return deserializeClaimCount(maybeAccount);
}

export async function safeFetchClaimCount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ClaimCount | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeClaimCount(maybeAccount) : null;
}

export async function fetchAllClaimCount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ClaimCount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'ClaimCount');
    return deserializeClaimCount(maybeAccount);
  });
}

export async function safeFetchAllClaimCount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ClaimCount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeClaimCount(maybeAccount as RpcAccount));
}

export function getClaimCountGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'gumdrop',
    'gdrpGjVffourzkdDRrQmySw4aTHr8a3xmQzzxSwFD1a'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      count: number | bigint;
      claimant: PublicKey;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      count: [8, u64()],
      claimant: [16, publicKeySerializer()],
    })
    .deserializeUsing<ClaimCount>((account) => deserializeClaimCount(account))
    .whereField('discriminator', [78, 134, 220, 213, 34, 152, 102, 167]);
}

export function getClaimCountSize(): number {
  return 48;
}
