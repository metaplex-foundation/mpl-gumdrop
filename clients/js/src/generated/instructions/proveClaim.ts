/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u32,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type ProveClaimInstructionAccounts = {
  /** The [MerkleDistributor]. */
  distributor: PublicKey | Pda;
  /** Status of the claim. */
  claimProof: PublicKey | Pda;
  /** Extra signer expected for claims */
  temporal: Signer;
  /** Payer of the claim. */
  payer?: Signer;
  /** The [System] program. */
  systemProgram?: PublicKey | Pda;
};

// Data.
export type ProveClaimInstructionData = {
  discriminator: Array<number>;
  claimPrefix: Uint8Array;
  claimBump: number;
  index: bigint;
  amount: bigint;
  claimantSecret: PublicKey;
  resource: PublicKey;
  resourceNonce: Uint8Array;
  proof: Array<Uint8Array>;
};

export type ProveClaimInstructionDataArgs = {
  claimPrefix: Uint8Array;
  claimBump: number;
  index: number | bigint;
  amount: number | bigint;
  claimantSecret: PublicKey;
  resource: PublicKey;
  resourceNonce: Uint8Array;
  proof: Array<Uint8Array>;
};

export function getProveClaimInstructionDataSerializer(): Serializer<
  ProveClaimInstructionDataArgs,
  ProveClaimInstructionData
> {
  return mapSerializer<
    ProveClaimInstructionDataArgs,
    any,
    ProveClaimInstructionData
  >(
    struct<ProveClaimInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['claimPrefix', bytes({ size: u32() })],
        ['claimBump', u8()],
        ['index', u64()],
        ['amount', u64()],
        ['claimantSecret', publicKeySerializer()],
        ['resource', publicKeySerializer()],
        ['resourceNonce', bytes({ size: u32() })],
        ['proof', array(bytes({ size: 32 }))],
      ],
      { description: 'ProveClaimInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [52, 82, 123, 224, 40, 139, 230, 184],
    })
  ) as Serializer<ProveClaimInstructionDataArgs, ProveClaimInstructionData>;
}

// Args.
export type ProveClaimInstructionArgs = ProveClaimInstructionDataArgs;

// Instruction.
export function proveClaim(
  context: Pick<Context, 'payer' | 'programs'>,
  input: ProveClaimInstructionAccounts & ProveClaimInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'gumdrop',
    'gdrpGjVffourzkdDRrQmySw4aTHr8a3xmQzzxSwFD1a'
  );

  // Accounts.
  const resolvedAccounts = {
    distributor: {
      index: 0,
      isWritable: true as boolean,
      value: input.distributor ?? null,
    },
    claimProof: {
      index: 1,
      isWritable: true as boolean,
      value: input.claimProof ?? null,
    },
    temporal: {
      index: 2,
      isWritable: false as boolean,
      value: input.temporal ?? null,
    },
    payer: {
      index: 3,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    systemProgram: {
      index: 4,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: ProveClaimInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getProveClaimInstructionDataSerializer().serialize(
    resolvedArgs as ProveClaimInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
