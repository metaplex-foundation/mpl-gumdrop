/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type RecoverUpdateAuthorityInstructionAccounts = {
  /** Base key of the distributor. */
  base: Signer;
  /** [MerkleDistributor]. */
  distributor: PublicKey | Pda;
  /** The [MerkleDistributor] wallet */
  distributorWallet: PublicKey | Pda;
  /** New update authority */
  newUpdateAuthority: PublicKey | Pda;
  /** Metadata account to update authority for */
  metadata: PublicKey | Pda;
  /** The [System] program. */
  systemProgram?: PublicKey | Pda;
  /** SPL [TokenMetadata] program. */
  tokenMetadataProgram?: PublicKey | Pda;
};

// Data.
export type RecoverUpdateAuthorityInstructionData = {
  discriminator: Array<number>;
  bump: number;
  walletBump: number;
};

export type RecoverUpdateAuthorityInstructionDataArgs = {
  bump: number;
  walletBump: number;
};

export function getRecoverUpdateAuthorityInstructionDataSerializer(): Serializer<
  RecoverUpdateAuthorityInstructionDataArgs,
  RecoverUpdateAuthorityInstructionData
> {
  return mapSerializer<
    RecoverUpdateAuthorityInstructionDataArgs,
    any,
    RecoverUpdateAuthorityInstructionData
  >(
    struct<RecoverUpdateAuthorityInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['bump', u8()],
        ['walletBump', u8()],
      ],
      { description: 'RecoverUpdateAuthorityInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [142, 251, 209, 116, 87, 100, 36, 191],
    })
  ) as Serializer<
    RecoverUpdateAuthorityInstructionDataArgs,
    RecoverUpdateAuthorityInstructionData
  >;
}

// Args.
export type RecoverUpdateAuthorityInstructionArgs =
  RecoverUpdateAuthorityInstructionDataArgs;

// Instruction.
export function recoverUpdateAuthority(
  context: Pick<Context, 'programs'>,
  input: RecoverUpdateAuthorityInstructionAccounts &
    RecoverUpdateAuthorityInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'gumdrop',
    'gdrpGjVffourzkdDRrQmySw4aTHr8a3xmQzzxSwFD1a'
  );

  // Accounts.
  const resolvedAccounts = {
    base: { index: 0, isWritable: false as boolean, value: input.base ?? null },
    distributor: {
      index: 1,
      isWritable: false as boolean,
      value: input.distributor ?? null,
    },
    distributorWallet: {
      index: 2,
      isWritable: false as boolean,
      value: input.distributorWallet ?? null,
    },
    newUpdateAuthority: {
      index: 3,
      isWritable: false as boolean,
      value: input.newUpdateAuthority ?? null,
    },
    metadata: {
      index: 4,
      isWritable: true as boolean,
      value: input.metadata ?? null,
    },
    systemProgram: {
      index: 5,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    tokenMetadataProgram: {
      index: 6,
      isWritable: false as boolean,
      value: input.tokenMetadataProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: RecoverUpdateAuthorityInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.tokenMetadataProgram.value) {
    resolvedAccounts.tokenMetadataProgram.value = context.programs.getPublicKey(
      'mplTokenMetadata',
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
    );
    resolvedAccounts.tokenMetadataProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getRecoverUpdateAuthorityInstructionDataSerializer().serialize(
    resolvedArgs as RecoverUpdateAuthorityInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
