/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Serializer,
  array,
  bool,
  string,
  struct,
  u16,
  u32,
  u64,
} from '@metaplex-foundation/umi/serializers';
import { Creator, CreatorArgs, getCreatorSerializer } from '.';

export type ConfigData = {
  uuid: string;
  /** The symbol for the asset */
  symbol: string;
  /** Royalty basis points that goes to creators in secondary sales (0-10000) */
  sellerFeeBasisPoints: number;
  creators: Array<Creator>;
  maxSupply: bigint;
  isMutable: boolean;
  retainAuthority: boolean;
  maxNumberOfLines: number;
};

export type ConfigDataArgs = {
  uuid: string;
  /** The symbol for the asset */
  symbol: string;
  /** Royalty basis points that goes to creators in secondary sales (0-10000) */
  sellerFeeBasisPoints: number;
  creators: Array<CreatorArgs>;
  maxSupply: number | bigint;
  isMutable: boolean;
  retainAuthority: boolean;
  maxNumberOfLines: number;
};

export function getConfigDataSerializer(): Serializer<
  ConfigDataArgs,
  ConfigData
> {
  return struct<ConfigData>(
    [
      ['uuid', string()],
      ['symbol', string()],
      ['sellerFeeBasisPoints', u16()],
      ['creators', array(getCreatorSerializer())],
      ['maxSupply', u64()],
      ['isMutable', bool()],
      ['retainAuthority', bool()],
      ['maxNumberOfLines', u32()],
    ],
    { description: 'ConfigData' }
  ) as Serializer<ConfigDataArgs, ConfigData>;
}
