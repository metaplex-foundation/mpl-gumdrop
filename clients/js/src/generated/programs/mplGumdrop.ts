/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  ClusterFilter,
  Context,
  Program,
  PublicKey,
} from '@metaplex-foundation/umi';
import {
  getMplGumdropErrorFromCode,
  getMplGumdropErrorFromName,
} from '../errors';

export const MPL_GUMDROP_PROGRAM_ID =
  'gdrpGjVffourzkdDRrQmySw4aTHr8a3xmQzzxSwFD1a' as PublicKey<'gdrpGjVffourzkdDRrQmySw4aTHr8a3xmQzzxSwFD1a'>;

export function createMplGumdropProgram(): Program {
  return {
    name: 'mplGumdrop',
    publicKey: MPL_GUMDROP_PROGRAM_ID,
    getErrorFromCode(code: number, cause?: Error) {
      return getMplGumdropErrorFromCode(code, this, cause);
    },
    getErrorFromName(name: string, cause?: Error) {
      return getMplGumdropErrorFromName(name, this, cause);
    },
    isOnCluster() {
      return true;
    },
  };
}

export function getMplGumdropProgram<T extends Program = Program>(
  context: Pick<Context, 'programs'>,
  clusterFilter?: ClusterFilter
): T {
  return context.programs.get<T>('mplGumdrop', clusterFilter);
}

export function getMplGumdropProgramId(
  context: Pick<Context, 'programs'>,
  clusterFilter?: ClusterFilter
): PublicKey {
  return context.programs.getPublicKey(
    'mplGumdrop',
    MPL_GUMDROP_PROGRAM_ID,
    clusterFilter
  );
}
