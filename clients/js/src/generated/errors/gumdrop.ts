/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** InvalidProof: Invalid Merkle proof. */
export class InvalidProofError extends ProgramError {
  override readonly name: string = 'InvalidProof';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super('Invalid Merkle proof.', program, cause);
  }
}
codeToErrorMap.set(0x1770, InvalidProofError);
nameToErrorMap.set('InvalidProof', InvalidProofError);

/** DropAlreadyClaimed: Drop already claimed. */
export class DropAlreadyClaimedError extends ProgramError {
  override readonly name: string = 'DropAlreadyClaimed';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super('Drop already claimed.', program, cause);
  }
}
codeToErrorMap.set(0x1771, DropAlreadyClaimedError);
nameToErrorMap.set('DropAlreadyClaimed', DropAlreadyClaimedError);

/** Unauthorized: Account is not authorized to execute this instruction */
export class UnauthorizedError extends ProgramError {
  override readonly name: string = 'Unauthorized';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super(
      'Account is not authorized to execute this instruction',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x1772, UnauthorizedError);
nameToErrorMap.set('Unauthorized', UnauthorizedError);

/** OwnerMismatch: Token account owner did not match intended owner */
export class OwnerMismatchError extends ProgramError {
  override readonly name: string = 'OwnerMismatch';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super('Token account owner did not match intended owner', program, cause);
  }
}
codeToErrorMap.set(0x1773, OwnerMismatchError);
nameToErrorMap.set('OwnerMismatch', OwnerMismatchError);

/** TemporalMismatch: Temporal signer did not match distributor */
export class TemporalMismatchError extends ProgramError {
  override readonly name: string = 'TemporalMismatch';

  readonly code: number = 0x1774; // 6004

  constructor(program: Program, cause?: Error) {
    super('Temporal signer did not match distributor', program, cause);
  }
}
codeToErrorMap.set(0x1774, TemporalMismatchError);
nameToErrorMap.set('TemporalMismatch', TemporalMismatchError);

/** NumericalOverflow: Numerical Overflow */
export class NumericalOverflowError extends ProgramError {
  override readonly name: string = 'NumericalOverflow';

  readonly code: number = 0x1775; // 6005

  constructor(program: Program, cause?: Error) {
    super('Numerical Overflow', program, cause);
  }
}
codeToErrorMap.set(0x1775, NumericalOverflowError);
nameToErrorMap.set('NumericalOverflow', NumericalOverflowError);

/** InvalidClaimBump: Invalid Claim Bump */
export class InvalidClaimBumpError extends ProgramError {
  override readonly name: string = 'InvalidClaimBump';

  readonly code: number = 0x1776; // 6006

  constructor(program: Program, cause?: Error) {
    super('Invalid Claim Bump', program, cause);
  }
}
codeToErrorMap.set(0x1776, InvalidClaimBumpError);
nameToErrorMap.set('InvalidClaimBump', InvalidClaimBumpError);

/** MustUseOfficialCandyMachine: Gumdrop only supports the official Metaplex Candy machine contracts */
export class MustUseOfficialCandyMachineError extends ProgramError {
  override readonly name: string = 'MustUseOfficialCandyMachine';

  readonly code: number = 0x1777; // 6007

  constructor(program: Program, cause?: Error) {
    super(
      'Gumdrop only supports the official Metaplex Candy machine contracts',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x1777, MustUseOfficialCandyMachineError);
nameToErrorMap.set(
  'MustUseOfficialCandyMachine',
  MustUseOfficialCandyMachineError
);

/** BumpSeedNotInHashMap: Bump seed not in hash map */
export class BumpSeedNotInHashMapError extends ProgramError {
  override readonly name: string = 'BumpSeedNotInHashMap';

  readonly code: number = 0x1778; // 6008

  constructor(program: Program, cause?: Error) {
    super('Bump seed not in hash map', program, cause);
  }
}
codeToErrorMap.set(0x1778, BumpSeedNotInHashMapError);
nameToErrorMap.set('BumpSeedNotInHashMap', BumpSeedNotInHashMapError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getGumdropErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getGumdropErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
